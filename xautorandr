#!/usr/bin/env bash

# a script to automatically detect and configure available outputs.
#
# dependencies: xrandr

# settings:
declare -ar _CONFS=(
    "$HOME/.screens"
    "$HOME/.config/screens"
    "/etc/screens"
)

output() {
    printf '%s\n' "$*"
}

error() {
    msg="[ERROR] $*"
    printf '%s\n' "$msg"
}

is_connected() {
    output="$1"
    grep -q "^${output} " <<<"$(xrandr -q | grep " connected")"
    return $?
}

contains() {
    array="$1[@]"
    array=("${!array}")
    value="$2"
    for element in "${array[@]}" ; do
        if [[ "${element}" == "${value}" ]]; then
            return 0
        fi
    done
    return 1
}

for conf in "${_CONFS[@]}" ; do
    if [[ -f "$conf" ]] ; then
        declare -r _CONF="$conf"
        break
    fi
done

if ! [[ "$_CONF" ]] ; then
    error "No config found."
    exit 1
fi

outputs=($(xrandr -q | awk '/connected/ {print $1}'))
cmd="xrandr"

declare -a screens

while read line ; do
    screen="$(cut -d ':' -f 1 <<< "$line")"
    mode="$(cut -d ':' -f 2- <<< "$line")"
    screen="${screen## }";screen="${screen%% }"
    mode="${mode## }";mode="${mode%% }"

    if [[ "$mode" == "primary" ]] ; then
        cmd="$cmd --output ${screen} --auto --primary"
        primary="$screen"
        screens+=("$screen")
    else
        if ! [[ "$primary" ]] ; then
            error "No primary screen defined, has to be first definition."
            exit 1
        fi
        if is_connected "$screen" ; then
            if [[ "$mode" == "right" ]] || [[ "$mode" == "left" ]] ; then
                pos="${mode}-of"
            elif [[ "$mode" == "mirror" ]] ; then
                pos="same-as"
            else
                error "Unknown mode ${mode}."
                exit 1
            fi
            cmd="$cmd --output ${screen} --${pos} $primary --auto"
            screens+=("$screen")
        fi
    fi
done < "$_CONF"

# explicitly disable all disconnected outputs, necessary for example for i3 to
# notice the change
for output in "${outputs[@]}" ; do
    if ! contains "screens" "$output" ; then
        cmd="$cmd --output $output --off"
    fi
done

output $cmd
$cmd
